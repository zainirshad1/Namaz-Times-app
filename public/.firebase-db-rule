rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
   
    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's role from their user document
    // (Ensure your user documents actually have a 'role' field when using this)
    function getExistingUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Helper function to get the user's Masjid ID from their user document
    // (Ensure your user documents actually have a 'masjidId' field when using this)
    function getUserMasjidId() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.masjidId;
    }

    // --- Rules for the 'users' collection and individual user documents ---
    match /users/{userId} {
      // Allow authenticated users to read, update, and delete their own top-level user document
      allow read, update, delete: if isAuthenticated() && request.auth.uid == userId;
      // Allow any authenticated user to create their own top-level user document on first sign-in
      allow create: if isAuthenticated(); 

      // --- Rules for subcollections and their documents nested directly under a user's document ---
      // These match blocks handle paths that are now 4 segments long (collection/document/collection/document)
      
      // Allows access to documents within the 'personalDetails' subcollection (e.g., /users/{userId}/personalDetails/profile)
      match /personalDetails/{docId} { 
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }

      // Allows access to documents within the 'appSettings' subcollection (e.g., /users/{userId}/appSettings/defaults)
      match /appSettings/{docId} { 
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }

      // --- Rules for the 'quranData' subcollection and its nested documents ---
      // This match block starts by allowing access to documents directly within 'quranData'
      match /quranData/{docId} { 
        // Allow read/write access to documents like 'quranSummary', 'rewardsTotals', 'lastReadProgress'
        allow read, write: if isAuthenticated() && request.auth.uid == userId; 
      }

      // --- Rules for the 'dailyReadLogs' subcollection ---
      // Paths: /users/{userId}/dailyReadLogs/{YYYY-MM-DD}
      match /dailyReadLogs/{docId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
      
      // --- Rules for the 'dailyListenLogs' subcollection ---
      // Paths: /users/{userId}/dailyListenLogs/{YYYY-MM-DD}
      match /dailyListenLogs/{docId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }

      // --- Rules for the 'rewardsHistory' subcollection ---
      // Paths: /users/{userId}/rewardsHistory/{transactionId}
      match /rewardsHistory/{docId} {
        allow read, write: if isAuthenticated() && request.auth.uid == userId;
      }
    }

    // --- Rules for other top-level collections (unchanged) ---
    match /masjids/{masjidId} {
      allow read: if true;
      allow write: if isAuthenticated() && getExistingUserRole() == 'superAdmin';
      allow update: if isAuthenticated() && getExistingUserRole() == 'masjidAdmin' && getUserMasjidId() == masjidId;
    }

    match /prayerTimes/{prayerTimeId} {
      allow read: if true;
      allow write: if isAuthenticated() && getExistingUserRole() == 'superAdmin';
      allow update: if isAuthenticated() && getExistingUserRole() == 'masjidAdmin' && getUserMasjidId() == prayerTimeId;
    }

    match /cityDefaults/{cityId} {
      allow read: if true;
      allow write: if isAuthenticated() && getExistingUserRole() == 'superAdmin';
    }
  }
}
