rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to get the user's role from their 'users' document for existing documents
    // IMPORTANT: This helper assumes 'users' is a top-level collection.
    // If your user roles are now stored under artifacts/{appId}/users/{userId}/profile/data,
    // you might need to adjust where these helpers read from.
    function getExistingUserRole() {
      // Ensure the document exists before trying to access .data.role
      // Using `request.resource.data.role` for new writes or `resource.data.role` for existing
      // Assuming 'users' is a top-level collection for simplicity based on your previous code.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Helper function to get the user's bonded masjidId
    // IMPORTANT: This helper assumes 'users' is a top-level collection.
    // If your user profiles are now stored under artifacts/{appId}/users/{userId}/profile/data,
    // you might need to adjust where these helpers read from.
    function getUserMasjidId() {
      // Ensure the document exists before trying to access .data.masjidId
      // Assuming 'users' is a top-level collection for simplicity based on your previous code.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.masjidId;
    }

    // Rules for the top-level 'users' collection (if used by other parts of your system)
    // This rule allows authenticated users to manage their OWN basic user document.
    match /users/{userId} {
      allow read, update, delete: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated(); // Allow any authenticated user to create their own user document
    }

    // --- CORRECTED RULE FOR USER PROGRESS DATA ---
    // This rule allows authenticated users (including anonymous) to read and write
    // their own data within the 'userProgress' collection and its subcollections.
    // This covers paths like /userProgress/{userId}/readingHistory/{documentId}
    // and /userProgress/{userId} for the lastRead progress.
    match /userProgress/{userId=**} { // Using userId=** to match documents and subcollections under userId
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
    }
    // ---------------------------------------------

    // Rules for 'masjids' collection
    match /masjids/{masjidId} {
      // Anyone can read masjid details
      allow read: if true;

      // Super Admin can create, update, or delete any masjid document
      allow write: if isAuthenticated() && getExistingUserRole() == 'superAdmin';

      // Masjid Admin can only update their bonded masjid's document
      allow update: if isAuthenticated() && getExistingUserRole() == 'masjidAdmin' && getUserMasjidId() == masjidId;
    }

    // Rules for 'prayerTimes' collection
    match /prayerTimes/{prayerTimeId} {
      // Anyone can read prayer times
      allow read: if true;

      // Super Admin can create, update, or delete any prayer times document
      allow write: if isAuthenticated() && getExistingUserRole() == 'superAdmin';

      // Masjid Admin can only update their bonded masjid's prayer times document
      allow update: if isAuthenticated() && getExistingUserRole() == 'masjidAdmin' && getUserMasjidId() == prayerTimeId;
    }

    // Rules for 'cityDefaults' collection
    match /cityDefaults/{cityId} {
      // Anyone can read city defaults
      allow read: if true;
      // Only Super Admin can create, update, or delete city defaults
      allow write: if isAuthenticated() && getExistingUserRole() == 'superAdmin';
    }
  }
}
